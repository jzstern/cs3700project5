#!/usr/bin/env python

import sys, socket, select, time, json, random

class KVStore:
	def __init__(self, id, replicas):
		# Socket connection
		self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
		# Instance ID number
		self.my_id = id
		# The ID numbers of all the other replicas
		self.replica_ids = replicas
		# The current election term across all replicas
		self.term = 0
		# Needs to be one of the following: follower, candidate, leader
		self.state = 'follower'
		# Time we last heard a message from the leader
		self.lastLeaderMsg = time.time()
		# Timeout in milliseconds
		self.timeout = random.randint(150, 300) / float(1000)
		# Timeout to be used during a split vote
		self.election_timeout = random.randint(50, 100) / float(1000)
		# Counter for the number of messages sent
		self.MID = 0

		# Connect to the network. All messages to/from other replicas and clients will occur over this socket
		self.sock.connect(self.my_id)

	# init election process by changing state to candidate, incrementing term and sending elect msgs to replicas
	def request_vote(self):
		self.state = 'candidate'
		self.term += 1
		msg = {'src': self.my_id, 'dst': 'FFFF', 'leader': self.my_id, 'type': 'req_vote', 'MID': self.my_id + str(self.MID)}
		self.MID += 1

		self.sock.send(json.dumps(msg))

	def listen(self):
		last = 0

		while True:
			ready = select.select([self.sock], [], [], 0.1)[0]

			if self.sock in ready:
				msg_raw = self.sock.recv(32768)

				if len(msg_raw) == 0: continue
				msg = json.loads(msg_raw)

				# For now, ignore get() and put() from clients
				if msg['type'] in ['get', 'put']:
					print('type: ' + msg['type'])

				# Handle noop messages. This may be removed from your final implementation
				elif msg['type'] == 'noop':
					print '%s received a NOOP from %s' % (msg['dst'], msg['src'])


			clock = time.time()

			if clock - self.lastLeaderMsg >= self.timeout:
				self.request_vote()

			if clock-last > 2:
				# Send a no-op message to a random peer every two seconds, just for fun
				# You definitely want to remove this from your implementation
				msg = {'src': self.my_id, 'dst': random.choice(self.replica_ids), 'leader': 'FFFF', 'type': 'noop'}
				self.sock.send(json.dumps(msg))
				print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
				last = clock


if __name__ == "__main__":
	init_id = sys.argv[1]
	init_replica_ids = sys.argv[2:]

	db = KVStore(init_id, init_replica_ids)
	db.listen()
